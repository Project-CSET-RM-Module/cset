Index: ../../CSETWebNg/src/app/assessment/results/vbos/vbos-summary.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component, OnInit, HostListener, ViewChild, ElementRef, Input } from '@angular/core';\r\nimport { NavigationService } from '../../../services/navigation.service';\r\nimport { MaturityService } from '../../../services/maturity.service';\r\nimport { AssessmentService } from '../../../services/assessment.service';\r\nimport { ReportAnalysisService } from '../../../services/report-analysis.service';\r\nimport { ReportService } from '../../../services/report.service';\r\nimport { VbosDataService } from '../../../services/vbos-data.service';\r\nimport * as $ from 'jquery';\r\nimport { formatPercent } from '@angular/common';\r\n\r\n\r\n\r\n// New Custom TS to match SP\r\n@Component({\r\n\tselector: 'app-vbos-summary',\r\n\ttemplateUrl: './vbos-summary.component.html',\r\n\t//styleUrls: \r\n\t//host: {}\r\n})\r\nexport class VbosSummaryComponent implements OnInit {\r\n\t\r\n  initialized = false;\r\n\tdataError = false;\r\n\r\n  achievedLevelList = [];\r\n\tstatsByCategoryList = [];\r\n\r\n  finalscorewidthvariable;\r\n  assetmwidthvariable;\r\n  configmanwidthvariable;\r\n  accesscwidthvariable;\r\n  flawremwidthvariable;\r\n  malcodewidthvariable;\r\n  sysintwidthvariable;\r\n  continmonwidthvariable;\r\n  indidrespwidthvariable;\r\n  archdevwidthvariable;\r\n  supplymanwidthvariable;\r\n\r\n  finalscore;\r\n  assetmscore;\r\n  configmscore;\r\n  accesscscore;\r\n  flawrscore;\r\n  malcodescore;\r\n  systemiscore;\r\n  continmscore;\r\n  incresprecoscore;\r\n  archdevscore;\r\n  supplychscore;\r\n\r\n  answerDistribByLevel = [];\r\n\r\n  countTable = [];\r\n\r\nconstructor(\r\n  public maturitySvc: MaturityService, \r\n  public assessmentSvc: AssessmentService,\r\n  public navSvc: NavigationService\r\n){}\r\n\r\nngOnInit(): void {\r\n  this.maturitySvc.getResultsData('vbosSiteSummary').subscribe((r: any) => {\r\n    console.log(r);\r\n    r.Grouping_Id;\r\n    console.log(r.Grouping_Id);\r\n\r\n    //capture data here\r\n    this.assetmscore = 2;\r\n    this.configmscore = 3;\r\n    this.accesscscore = 3;\r\n    this.flawrscore = 3;\r\n    this.malcodescore = 3;\r\n    this.systemiscore = 3;\r\n    this.continmscore = 3;\r\n    this.incresprecoscore = 3;\r\n    this.archdevscore = 2;\r\n    this.supplychscore = 3;\r\n\r\n    // this.finalscore = 3;\r\n\r\n    // this.createAnswerDistribByLevel(r);\r\n\r\n    // this.createCountTable(r);\r\n\r\n    // this.answerDistribByLevel = [];\r\n\r\n    this.achievedLevel(r);\r\n\r\n    this.finalscore = this.achievedLevel;\r\n\r\n    \r\n\r\n    });\r\n\r\n    //this.finalscorewidthvariable = displayPercent(66);\r\n    this.finalscorewidthvariable = this.finalscore * 33;\r\n    // = displayPercent(finalscore * 33);\r\n    \r\n    this.assetmwidthvariable = this.assetmscore * 33;\r\n    \r\n    this.configmanwidthvariable = this.configmscore * 33;\r\n    //this.configmanwidthvariable = displayPercent(this.configmscore * 33);\r\n    this.accesscwidthvariable = this.accesscscore * 33;\r\n    //this.accesscwidthvariable = displayPercent(this.accesscscore * 33);\r\n    this.flawremwidthvariable = this.flawrscore * 33;\r\n    //this.flawremwidthvariable = displayPercent(this.flawrscore * 33);\r\n    this.malcodewidthvariable = this.malcodescore * 33;\r\n    //this.malcodewidthvariable = displayPercent(this.malcodescore * 33);\r\n    this.sysintwidthvariable = this.systemiscore * 33;\r\n    //this.sysintwidthvariable = displayPercent(this.systemiscore * 33);\r\n    this.continmonwidthvariable = this.continmscore * 33;\r\n    //this.continmonwidthvariable = displayPercent(this.continmscore * 33);\r\n    this.indidrespwidthvariable = this.incresprecoscore * 33;\r\n    //this.indidrespwidthvariable = displayPercent(this.incresprecoscore * 33);\r\n    //this.archdevwidthvariable = displayPercent(33);\r\n    this.archdevwidthvariable = this.archdevscore * 33;\r\n    //this.archdevwidthvariable = displayPercent(this.archdevscore * 33);\r\n    this.supplymanwidthvariable = this.supplychscore * 33;\r\n    //this.supplymanwidthvariable = displayPercent(this.supplychscore * 33);\r\n    \r\n  }\r\n\r\n  achievedLevel(data) {\r\n    //is this necessary?\r\n\t//let outputData = data.filter(obj => obj.modelLevel != \"Aggregate\");\r\n    // outputData.sort((a, b) => (a.modelLevel > b.modelLevel) ? 1 : -1);\r\n    //let levels: number[] = [];\r\n    //outputData.forEach(o => levels.push(o.level)); \r\n    // this.achievedLevelList = [];\r\n    // outputData.forEach(element => {\r\n    //   achievedLevel += element assessmentLevel;\r\n\r\n    // html accessible?\r\n    //   element[\"achievedLevel\"] = achievedLevel;\r\n\r\n        // });\r\n    let achievedLevel = data.level;\r\n    console.log(achievedLevel);\r\n\treturn achievedLevel;\r\n\t// return outputData;\r\n  }\r\n\r\n// Preferred table data method\r\n\r\n// createAnswerDistribByLevel(r: any) {\r\n//   let levelList = [];\r\n//   //r.rraSummary.forEach(element => {\r\n//   r.MaturityService.forEach(element => {\r\n//     let level = levelList.find(x => x.name == element.level_Name);\r\n//     if (!level) {\r\n//       level = {\r\n//         name: element.level_Name, series: [\r\n//           { name: 'Yes', value: 0 },\r\n//           { name: 'No', value: 0 },\r\n//           { name: 'Unanswered', value: 0 },\r\n//         ]\r\n//       };\r\n//       console.log(level);\r\n//       levelList.push(level);\r\n//     }\r\n//     var p = level.series.find(x => x.name == element.answer_Full_Name);\r\n//     p.value = element.percent;\r\n//   });\r\n//   this.answerDistribByLevel = levelList;\r\n// }\r\n\r\n// alternate table count data\r\n\r\n// createCountTable(r: any) {\r\n//   let countList = [];\r\n//   //r.rraSummaryByGoal.forEach(element => {\r\n//   r.MaturityService.forEach(element => {  \r\n//     let count = countList.find(x => x.name == element.title);\r\n//     if (!count) {\r\n//       count = {\r\n//         name: element.title,\r\n//         yes: 0,\r\n//         no: 0,\r\n//         unanswered: 0\r\n//       };\r\n//       countList.push(count);\r\n//     }\r\n//     switch (element.answer_Text) {\r\n//       case 'Y':\r\n//         count.yes = element.qc;\r\n//         break;\r\n//       case 'N':\r\n//         count.no = element.qc;\r\n//         break;\r\n//       case 'U':\r\n//         count.unanswered = element.qc\r\n//         break;\r\n//     }\r\n//   });\r\n//   countList.forEach(r => {\r\n//     r.total = r.yes + r.no + r.unanswered;\r\n//     r.percent = ((r.yes / r.total) * 100).toFixed(1);\r\n//   });\r\n//   this.countTable = countList;\r\n// }\r\n\r\n}\r\n\r\nconst displayPercent = (percent: number) => \r\n'${(percent * 100).toFixed(2)}%';\r\n\r\n//DOCUMENTATION and ATTEMPTS\r\n\r\n//answer data distributed by sections\r\n// statsByCategory(data) {\r\n// \tlet outputData = data.filter(obj => obj.modelLevel != \"Aggregate\");\r\n//     outputData.sort((a, b) => (a.modelLevel > b.modelLevel) ? 1 : -1);\r\n//     let categoryList = [];\r\n    \r\n//     // Check Hardcoded Array in vbos data service\r\n\r\n// \treturn outputData;\t\r\n// }\r\n\r\n// public setWidths(width: string) {\r\n//   //const docStyle = document.documentElement.style;\r\n//   //docStyle.setProperty('--achievedwidthvariable');\r\n//   //etc\r\n//   //docStyle not being recognized. JS?\r\n// }\r\n\r\n//secondary data objectives\r\n// categoryCounts(data) {\r\n// \tlet outputData = [];\t\r\n// \treturn outputData;\r\n// }\r\n\r\n// Previous TS attempt \r\n\r\n// @Component({\r\n//   selector: 'app-vbos-summary',\r\n//   templateUrl: './vbos-summary.component.html',\r\n//   styleUrls: ['./rra-summary-all.component.scss']\r\n//   host: { class: 'd-flex flex-column flex-11a' }\r\n// })\r\n// export class VbosSummaryComponent implements OnInit {\r\n//   @Input() title = \"VBOS Performance Summary\";\r\n//   @Input() showNav = true;\r\n\r\n//   initialized = false;\r\n\r\n//   sAxisTicks = [0, 5, 10, 15, 18];\r\n//   maxLevel = 0;\r\n//   answerCountsByLevel = [];\r\n//   answerDistribColorScheme = { domain: ['#28A745', '#DC3545', '#c3c3c3'] };\r\n\r\n//   complianceByGoal = [];\r\n//   answerDistribByGoal = [];\r\n//   answerDistribByLevel = [];\r\n\r\n//   colorScheme1 = { domain: ['#007BFF'] };\r\n//   xAxisTicks = [0, 25, 50, 75, 100];\r\n\r\n//   constructor(\r\n//     public VbosDataSvc: VbosDataService,\r\n//     public navSvc: NavigationService,\r\n//     public maturitySvc: MaturityService,\r\n//     public assessmentSvc: AssessmentService\r\n//   ) { }\r\n\r\n//   ngOnInit(): void {\r\n//     this.VbosDataSvc.getVBOSDetail().subscribe((r: any) => {\r\n//       this.createAnswerCountsByLevel(r);\r\n//       this.createAnswerDistribByLevel(r);\r\n//     });\r\n//   }\r\n\r\n//   createAnswerCountsByLevel(r: any) {\r\n//     let levelList = [];\r\n\r\n//     r.vbosSummary.forEach(element => {\r\n//       let level = levelList.find(x => x.name == element.level_Name);\r\n//       if (!level) {\r\n//         level = {\r\n//           name: element.level_Name, series: [\r\n//             { name: 'Yes', value: 0 },\r\n//             { name: 'No', value: 0 },\r\n//             { name: 'Unanswered', value: 0 },\r\n//           ]\r\n//         };\r\n//         levelList.push(level);\r\n//       }\r\n\r\n//       var p = level.series.find(x => x.name == element.answer_Full_Name);\r\n//       p.value = element.qc;\r\n//     });\r\n//     this.answerCountsByLevel = levelList;\r\n//     this.findMaxLength();\r\n//   }\r\n\r\n//   findMaxLength(){\r\n//     let mLength = 0;\r\n//     this.answerCountsByLevel.forEach(x =>{\r\n//       let length = 0;\r\n//       x.series.forEach(y => {\r\n//         length += y.value;\r\n//       });\r\n//       if(mLength < length){\r\n//         mLength = length;\r\n//       }\r\n//     })\r\n//     this.maxLevel = mLength;\r\n//   }\r\n//   createAnswerDistribByLevel(r: any) {\r\n//     let levelList = [];\r\n//     r.vbosSummary.forEach(element => {\r\n//       let level = levelList.find(x => x.name == element.level_Name);\r\n//       if (!level) {\r\n//         level = {\r\n//           name: element.level_Name, series: [\r\n//             { name: 'Yes', value: 0 },\r\n//             { name: 'No', value: 0 },\r\n//             { name: 'Unanswered', value: 0 },\r\n//           ]\r\n//         };\r\n//         levelList.push(level);\r\n//       }\r\n\r\n//       var p = level.series.find(x => x.name == element.answer_Full_Name);\r\n//       p.value = element.percent;\r\n//     });\r\n\r\n//     this.answerDistribByLevel = levelList;\r\n//   }\r\n\r\n  // formatPercent(x: any) {\r\n  //   return x + '.0';\r\n  // }\r\n\r\n\r\n\r\n// }\r\n// }\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../CSETWebNg/src/app/assessment/results/vbos/vbos-summary.component.ts b/../../CSETWebNg/src/app/assessment/results/vbos/vbos-summary.component.ts
--- a/../../CSETWebNg/src/app/assessment/results/vbos/vbos-summary.component.ts	(revision 85fe5e784a49770240d8f393839c60e1732dea10)
+++ b/../../CSETWebNg/src/app/assessment/results/vbos/vbos-summary.component.ts	(date 1666206499391)
@@ -87,7 +87,7 @@
 
     this.achievedLevel(r);
 
-    this.finalscore = this.achievedLevel;
+    this.finalscore = this.achievedLevel(r);
 
     
 
Index: ../../CSETWebNg/src/app/assessment/results/crmp/crmp-summary.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Component, Input, OnInit, HostListener, ViewChild, ElementRef } from '@angular/core';\r\nimport { NavigationService } from '../../../services/navigation.service';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { MaturityService } from '../../../services/maturity.service';\r\nimport { ChartService } from '../../../services/chart.service';\r\nimport { CrmpDataService } from '../../../services/crmp-data.service';\r\nimport { NgxChartsModule, ColorHelper } from '@swimlane/ngx-charts';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { AssessmentService } from '../../../services/assessment.service';\r\nimport { data } from 'jquery';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-crmp-summary',\r\n  templateUrl: './crmp-summary.component.html',\r\n  styleUrls: ['./crmp-summary.component.scss']\r\n})\r\nexport class CrmpSummaryComponent implements OnInit {\r\n  @Input() title = \"CRMP Performance Summary\";\r\n  @Input() showNav = true;\r\n\r\n  initialized = false;\r\n  dataError = false;\r\n\r\n  achievedLevelList = [];\r\n\tstatsByCategoryList = [];\r\n\r\n  riskfwidthvariable;\r\n  riskawidthvariable;\r\n  riskrwidthvariable;\r\n  riskmwidthvariable;\r\n\r\n  finalscorevariable;\r\n\r\n  riskfscore;\r\n  riskascore;\r\n  riskrscore;\r\n  riskmscore;\r\n\r\n  finalscore;\r\n  \r\n  crmpModel;\r\n\r\n  createAnswerCountsByLevel;\r\n  // response;\r\n  // crmpSummary;\r\n  // statsByLevel;\r\n  // columnWidthPx = 25;\r\n\r\n  // statsByDomain;\r\n  // statsByDomainAtUnderTarget;\r\n  // gridColumnCount = 10;\r\n  // gridColumns = new Array(this.gridColumnCount);\r\n  // @ViewChild(\"gridChartDataDiv\") gridChartData: ElementRef;\r\n  // @ViewChild(\"gridTiles\") gridChartTiles: Array<any>;\r\n  // columnWidthEmitter: BehaviorSubject<number>;\r\n\r\n  // whiteText = \"rgba(255,255,255,1)\";\r\n  // blueText = \"rgba(31,82,132,1)\";\r\n\r\n  // sAxisTicks = [0, 5, 10, 15, 18];\r\n  // maxLevel = 0;\r\n  // answerCountsByLevel = [];\r\n  // answerDistribColorScheme = { domain: ['#28A745', '#DC3545', '#c3c3c3'] };\r\n\r\n  // complianceByGoal = [];\r\n  // answerDistribByGoal = [];\r\n  // answerDistribByLevel = [];\r\n\r\n constructor(\r\n   public maturitySvc: MaturityService,\r\n   public CrmpDataSvc: CrmpDataService,\r\n   public navSvc: NavigationService,\r\n   public assessmentSvc: AssessmentService\r\n  ) { \r\n    //this.columnWidthEmitter = new BehaviorSubject<number>(25);\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    \r\n    this.maturitySvc.getResultsData('crmpSiteSummary').subscribe((r:any) => {\r\n      console.log(r)\r\n      r.Grouping_Id;\r\n      console.log(r.Grouping_Id);\r\n\r\n      //capture data here\r\n      this.riskfscore = 1;\r\n      this.riskascore = 1;\r\n      this.riskrscore = 1;\r\n      this.riskmscore = 1;\r\n\r\n      // this.finalscore = 3;\r\n\r\n      this.generateAchievedLevel(r);\r\n\r\n      this.finalscore = this.generateAchievedLevel;\r\n\r\n      // this.createCountTable(r);\r\n\r\n      // this.createAnswerCountsByLevel = [];\r\n\r\n      // is this necessary?\r\n      if (r.maturityModels) {\r\n        r.maturityModels.forEach(model => {\r\n          if (model.maturityModelName === 'CRMP') {\r\n            //this.achievedLevel = achievedLevel;\r\n            }\r\n        });\r\n      }\r\n      // this.riskascore = data.arguments.element.achievedLevel.vbosSiteSummary.vbosSiteSummary;\r\n      // let level = levelItem.find(x => x.name == element.level_Name);\r\n      // levelItem.find(x => x.Grouping_Id == element.Grouping_Id);\r\n      });\r\n\r\n    //this.finalscorevariable = this.displayPercent(33);\r\n    this.finalscorevariable = this.finalscore * 20;\r\n    this.riskfwidthvariable = this.riskfscore * 20;\r\n    this.riskawidthvariable = this.riskascore * 20;\r\n    this.riskrwidthvariable = this.riskrscore * 20;\r\n    this.riskmwidthvariable = this.riskmscore * 20;\r\n\r\n\r\n\r\n    //html\r\n    //{{riskascore}}\r\n    \r\n  }\r\n\r\n    generateAchievedLevel(data) {\r\n      //let outputData = data.filter(obj => obj.modelLevel != \"Aggregate\");\r\n        // outputData.sort((a, b) => (a.modelLevel > b.modelLevel) ? 1 : -1);\r\n    \r\n        //let levels: number[] = [];\r\n        //outputData.forEach(o => levels.push(o.level)); \r\n        // Minimum of Entire Data-Set Function\r\n        // this.achievedLevelList = [];\r\n        // outputData.forEach(element => {\r\n        //   achievedLevel += element assessmentLevel;\r\n        //   element[\"achievedLevel\"] = achievedLevel;\r\n        // });  \r\n        let achievedLevel = data.level;\r\n        console.log(achievedLevel);\r\n      return achievedLevel; \r\n      // return outputData;\r\n    }\r\n\r\n    displayPercent = (percent: number) => \r\n    '${(percent * 100).toFixed(2)}%';\r\n  }\r\n\r\n  // createAnswerCountsByLevel(r: any) {\r\n  //   let levelList = [];\r\n\r\n  //   r.crmpSummary.forEach(element => {\r\n  //     let level = levelList.find(x => x.name == element.level_Name);\r\n  //     if (!level) {\r\n  //       level = {\r\n  //         name: element.level_Name, series: [\r\n  //           { name: 'Yes', value: 0 },\r\n  //           { name: 'No', value: 0 },\r\n  //           { name: 'Unanswered', value: 0 },\r\n  //         ]\r\n  //       };\r\n  //       levelList.push(level);\r\n  //     }\r\n\r\n  //     var p = level.series.find(x => x.name == element.answer_Full_Name);\r\n  //     p.value = element.qc;\r\n  //   });\r\n  //   this.answerCountsByLevel = levelList;\r\n  //   this.findMaxLength();\r\n  // }\r\n\r\n\r\n  // Past attempts for reference\r\n\r\n\r\n      // // cmmc example\r\n    // //*********Error here*********\r\n    // this.CrmpDataSvc.getResultsData('crmpSiteSummary').subscribe(\r\n    //   (r: any) => {\r\n    //     this.response = r;\r\n\r\n    //     if (r.maturityModels) {\r\n    //       r.maturityModels.forEach(model => {\r\n    //         if (model.maturityModelName === 'CRMP') {\r\n    //           this.crmpModel = model\r\n    //           this.statsByLevel = this.generateStatsByLevel(this.crmpModel.statsByLevel)\r\n    //           this.statsByDomain = this.crmpModel.statsByDomain\r\n    //           this.statsByDomainAtUnderTarget = this.crmpModel.statsByDomainAtUnderTarget;\r\n    //         }\r\n    //       });\r\n    //       window.dispatchEvent(new Event('resize'));\r\n    //     }\r\n    //     this.initialized = true;\r\n    //     window.dispatchEvent(new Event('resize'));\r\n    //   },\r\n    //   error => {\r\n    //     this.dataError = true;\r\n    //     this.initialized = true;\r\n    //     console.log('Site Summary report load Error: ' + (<Error>error).message)\r\n    //   }\r\n    // ), (finish) => {\r\n    // };\r\n\r\n    // this.columnWidthEmitter.subscribe(item => {\r\n    //   $(\".gridCell\").css(\"width\", `${item}px`)\r\n    // })\r\n\r\n  // findMaxLength(){\r\n  //   let mLength = 0;\r\n  //   this.answerCountsByLevel.forEach(x =>{\r\n  //     let length = 0;\r\n  //     x.series.forEach(y => {\r\n  //       length += y.value;\r\n  //     });\r\n  //     if(mLength < length){\r\n  //       mLength = length;\r\n  //     }\r\n  //   })\r\n  //   this.maxLevel = mLength;\r\n  // }\r\n\r\n  // createAnswerDistribByLevel(r: any) {\r\n  //   let levelList = [];\r\n  //   r.crmpSummary.forEach(element => {\r\n  //     let level = levelList.find(x => x.name == element.level_Name);\r\n  //     if (!level) {\r\n  //       level = {\r\n  //         name: element.level_Name, series: [\r\n  //           { name: 'Yes', value: 0 },\r\n  //           { name: 'No', value: 0 },\r\n  //           { name: 'Unanswered', value: 0 },\r\n  //         ]\r\n  //       };\r\n  //       levelList.push(level);\r\n  //     }\r\n\r\n  //     var p = level.series.find(x => x.name == element.answer_Full_Name);\r\n  //     p.value = element.percent;\r\n  //   });\r\n\r\n  //   this.answerDistribByLevel = levelList;\r\n  // }\r\n\r\n  // createComplianceByGoal(r: any) {\r\n  //   let goalList = [];\r\n  //   this.answerDistribByGoal.forEach(element => {\r\n  //     var yesPercent = element.series.find(x => x.name == 'Yes').value;\r\n\r\n  //     var goal = { name: element.name, value: Math.round(yesPercent) };\r\n  //     goalList.push(goal);\r\n  //   });\r\n\r\n  //   this.complianceByGoal = goalList;\r\n  // }\r\n\r\n  // //Horizontal bar chart - Blue from RRA Gaps\r\n  // generateStatsByLevel(data) {\r\n  //   let outputData = data.filter(obj => obj.modelLevel != \"Aggregate\");\r\n  //   outputData.sort((a, b) => (a.modelLevel > b.modelLevel) ? 1 : -1);\r\n  //   let totalAnsweredCount = 0;\r\n  //   let totalUnansweredCount = 0;\r\n  //   outputData.forEach(element => {\r\n  //     totalUnansweredCount += element.questionUnAnswered;\r\n  //     totalAnsweredCount += element.questionAnswered;\r\n  //     element[\"totalUnansweredCount\"] = totalUnansweredCount;\r\n  //     element[\"totalAnsweredCount\"] = totalAnsweredCount;\r\n  //   });\r\n  //   return outputData;\r\n  // }\r\n\r\n  // //\r\n  // getcolumnWidth() {\r\n  //   if (this.gridChartData?.nativeElement != null) {\r\n  //     this.columnWidthPx = this.gridChartData.nativeElement.clientWidth / this.gridColumns.length;\r\n  //     this.columnWidthEmitter.next(this.columnWidthPx);\r\n  //   }\r\n  // }\r\n\r\n  // getBarWidth(data) {\r\n  //   return {\r\n  //     'flex-grow': data.questionAnswered / data.questionCount,\r\n  //     //'background': this.getGradient(\"blue\")\r\n  //   };\r\n  // }\r\n\r\n  // formatPercent(x: any) {\r\n  //   return x + '%';\r\n  // }\r\n\r\n\r\n\r\n\r\n\r\n// const displayPercent = (percent: number) => \r\n// '${(percent * 100).toFixed(2)}%';
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../../CSETWebNg/src/app/assessment/results/crmp/crmp-summary.component.ts b/../../CSETWebNg/src/app/assessment/results/crmp/crmp-summary.component.ts
--- a/../../CSETWebNg/src/app/assessment/results/crmp/crmp-summary.component.ts	(revision 85fe5e784a49770240d8f393839c60e1732dea10)
+++ b/../../CSETWebNg/src/app/assessment/results/crmp/crmp-summary.component.ts	(date 1666202787981)
@@ -95,7 +95,7 @@
 
       this.generateAchievedLevel(r);
 
-      this.finalscore = this.generateAchievedLevel;
+      this.finalscore = this.generateAchievedLevel(r);
 
       // this.createCountTable(r);
 
